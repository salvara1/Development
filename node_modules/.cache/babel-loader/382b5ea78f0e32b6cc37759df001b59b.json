{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/stephaniealvarado/Documents/course/CS1300/github/Development/dev/src/FilteredList.jsx\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport DisplayList from './DisplayList';\nimport ShoppingCart from './ShoppingCart';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './FilteredList.css'; // This Component contains all sorting, filtering, and aggregation functionality.\n\nclass FilteredList extends React.Component {\n  // Binds all functions related to sorting, filtering, and aggregation logic\n  constructor(props) {\n    super(props); // State includes all selected filter and sort options as well as the cart total\n    // and cart contents. These should be initialzed as none to present all candle items\n    // and an empty shopping cart.\n\n    this.onSortByPrice = event => {\n      this.setState({\n        sort: event\n      });\n    };\n\n    this.onSelectFilterSeason = event => {\n      this.setState({\n        season: event\n      });\n    };\n\n    this.onSelectFilterSize = event => {\n      this.setState({\n        size: event\n      });\n    };\n\n    this.matchesFilters = item => {\n      if (this.state.season === \"All\" && this.state.size === \"Al\") {\n        return true;\n      } else if (this.state.season === \"All\" && this.state.size === item.size) {\n        return true;\n      } else if (this.state.season === item.season && this.state.size === \"Al\") {\n        return true;\n      } else if (this.state.season === item.season && this.state.size === item.size) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    this.state = {\n      season: \"All\",\n      size: \"Al\",\n      sort: \"none\",\n      cartTotal: 0,\n      cartContents: {}\n    };\n    this.addToCart = this.addToCart.bind(this);\n    this.removeOne = this.removeOne.bind(this);\n    this.removeAll = this.removeAll.bind(this);\n    this.onSortByPrice = this.onSortByPrice.bind(this);\n    this.onSelectFilterSize = this.onSelectFilterSize.bind(this);\n    this.onSelectFilterSeason = this.onSelectFilterSeason.bind(this);\n    this.matchesFilters = this.matchesFilters.bind(this);\n    this.sortOptions = this.sortOptions.bind(this);\n  } // Adds a single product to the cart and updates the cart total\n\n\n  addToCart(object) {\n    let newContents = this.state.cartContents;\n\n    if (object.id in newContents) {\n      newContents[object.id][\"quantity\"]++;\n    } else {\n      let value = {\n        quantity: 1,\n        name: object.name,\n        cost: object.cost,\n        id: object.id,\n        pic: object.pic,\n        size: object.size,\n        burntime: object.burntime\n      };\n      newContents[object.id] = value;\n    }\n\n    this.setState({\n      cartContents: newContents\n    });\n    this.calculateTotal();\n  } // Reduces the quantity of a product by one and updates the cart total\n\n\n  removeOne(object) {\n    let newContents = this.state.cartContents;\n    newContents[object.id][\"quantity\"]--;\n\n    if (newContents[object.id][\"quantity\"] === 0) {\n      delete newContents[object.id];\n    }\n\n    this.setState({\n      cartContents: newContents\n    });\n    this.calculateTotal();\n  } // Removes entire product type from the cart and updates the cart total\n\n\n  removeAll(object) {\n    let newContents = this.state.cartContents;\n    delete newContents[object.id];\n    this.setState({\n      cartContents: newContents\n    });\n    this.calculateTotal();\n  } // calculates the total cost of the contents in the shopping cart.\n\n\n  calculateTotal() {\n    let totalCost = 0;\n\n    for (var key in this.state.cartContents) {\n      let cost = this.state.cartContents[key].quantity * this.state.cartContents[key].cost;\n      totalCost = totalCost + cost;\n    }\n\n    this.setState({\n      cartTotal: totalCost\n    });\n  } // updates the sorting option selected by the user\n\n\n  sortOptions(options) {\n    if (this.state.sort === \"lowhigh\") {\n      options.sort((a, b) => a.cost - b.cost);\n    } else if (this.state.sort === \"highlow\") {\n      options.sort((a, b) => b.cost - a.cost);\n    }\n\n    return options;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filtered\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        expand: \"xl\",\n        variant: \"light\",\n        className: \"Navbar\",\n        children: /*#__PURE__*/_jsxDEV(Navbar.Brand, {\n          className: \"brand\",\n          children: \"DISCOUNT CANDLE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(DisplayList, {\n          list: this.sortOptions(this.props.list.filter(this.matchesFilters)),\n          addToCart: this.addToCart,\n          size: this.onSelectFilterSize,\n          season: this.onSelectFilterSeason,\n          sort: this.onSortByPrice\n        }, 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ShoppingCart, {\n          contents: this.state.cartContents,\n          addToCart: this.addToCart,\n          removeOne: this.removeOne,\n          removeAll: this.removeAll,\n          cartTotal: this.state.cartTotal\n        }, 1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default FilteredList;","map":{"version":3,"sources":["/Users/stephaniealvarado/Documents/course/CS1300/github/Development/dev/src/FilteredList.jsx"],"names":["React","Component","ReactDOM","Navbar","Nav","DisplayList","ShoppingCart","NavDropdown","FilteredList","constructor","props","onSortByPrice","event","setState","sort","onSelectFilterSeason","season","onSelectFilterSize","size","matchesFilters","item","state","cartTotal","cartContents","addToCart","bind","removeOne","removeAll","sortOptions","object","newContents","id","value","quantity","name","cost","pic","burntime","calculateTotal","totalCost","key","options","a","b","render","list","filter"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav'\nimport DisplayList from './DisplayList'\nimport ShoppingCart from './ShoppingCart'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './FilteredList.css'\n\n// This Component contains all sorting, filtering, and aggregation functionality.\nclass FilteredList extends React.Component {\n  // Binds all functions related to sorting, filtering, and aggregation logic\n  constructor(props) {\n    super(props);\n    // State includes all selected filter and sort options as well as the cart total\n    // and cart contents. These should be initialzed as none to present all candle items\n    // and an empty shopping cart.\n    this.state = {\n      season: \"All\",\n      size: \"Al\",\n      sort: \"none\",\n      cartTotal: 0,\n      cartContents: {}\n    }\n    this.addToCart=this.addToCart.bind(this);\n    this.removeOne=this.removeOne.bind(this);\n    this.removeAll=this.removeAll.bind(this);\n    this.onSortByPrice=this.onSortByPrice.bind(this);\n    this.onSelectFilterSize=this.onSelectFilterSize.bind(this);\n    this.onSelectFilterSeason=this.onSelectFilterSeason.bind(this);\n    this.matchesFilters=this.matchesFilters.bind(this);\n    this.sortOptions=this.sortOptions.bind(this);\n  }\n\n  // Adds a single product to the cart and updates the cart total\n  addToCart(object) {\n    let newContents = this.state.cartContents;\n    if(object.id in newContents){\n      newContents[object.id][\"quantity\"]++;\n    } else {\n      let value = {quantity: 1, name: object.name, cost: object.cost, id: object.id, pic:object.pic, size:object.size, burntime:object.burntime}\n      newContents[object.id]=value\n    }\n    this.setState({cartContents: newContents});\n    this.calculateTotal();\n  }\n\n  // Reduces the quantity of a product by one and updates the cart total\n  removeOne(object){\n    let newContents = this.state.cartContents;\n    newContents[object.id][\"quantity\"]--;\n    if (newContents[object.id][\"quantity\"]===0){\n      delete newContents[object.id];\n    }\n    this.setState({cartContents:newContents});\n    this.calculateTotal();\n  }\n\n  // Removes entire product type from the cart and updates the cart total\n  removeAll(object){\n    let newContents = this.state.cartContents;\n    delete newContents[object.id];\n    this.setState({cartContents: newContents});\n    this.calculateTotal();\n  }\n\n  // calculates the total cost of the contents in the shopping cart.\n  calculateTotal(){\n    let totalCost = 0;\n    for (var key in this.state.cartContents){\n      let cost = this.state.cartContents[key].quantity*this.state.cartContents[key].cost;\n      totalCost = totalCost+ cost;\n    }\n    this.setState({cartTotal:totalCost});\n  }\n\n  // updates the sorting option selected by the user\n  onSortByPrice = event =>{\n    this.setState({\n      sort: event\n    });\n  }\n\n  // updates the season filtering option selected by the user\n  onSelectFilterSeason = event => {\n    this.setState({\n      season: event\n    })\n  }\n  \n  // updates the size filtering option selected by the user.\n  onSelectFilterSize = event => {\n    this.setState({\n      size: event\n    })\n  }\n\n  matchesFilters = item => {\n    if(this.state.season===\"All\"&&this.state.size===\"Al\"){\n      return true;\n    } else if(this.state.season===\"All\"&&this.state.size===item.size){\n      return true;\n    } else if(this.state.season===item.season&&this.state.size===\"Al\"){\n      return true;\n    } else if(this.state.season===item.season&&this.state.size===item.size){\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  sortOptions(options) {\n    if(this.state.sort===\"lowhigh\"){\n      options.sort((a, b)=> a.cost-b.cost);\n    } else if(this.state.sort===\"highlow\"){\n      options.sort((a,b)=>b.cost-a.cost);\n    }\n    return options;\n  }\n\n  render() {\n    return (\n      <div className=\"filtered\">\n        <Navbar expand=\"xl\" variant=\"light\" className=\"Navbar\">\n          <Navbar.Brand className=\"brand\">DISCOUNT CANDLE</Navbar.Brand>\n        </Navbar>\n        <div className=\"row\">\n          <DisplayList  list={this.sortOptions(this.props.list.filter(this.matchesFilters))}\n                        key={0}\n                        addToCart={this.addToCart}\n                        size={this.onSelectFilterSize}\n                        season={this.onSelectFilterSeason}\n                        sort={this.onSortByPrice}\n                        />\n          <ShoppingCart contents={this.state.cartContents}\n                        key={1}\n                        addToCart={this.addToCart}\n                        removeOne={this.removeOne}\n                        removeAll={this.removeAll}\n                        cartTotal={this.state.cartTotal}/>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default FilteredList;\n"]},"metadata":{},"sourceType":"module"}